{
  "author": "Wesley M. Conner",
  "gitHubUrl": "https://github.com/WesleyMConner",
  "payPalUrl": "paypal.me/wesmcPH",
  "packages": [
    {
      "name": "Wmc Utils",
      "id": "efadea22-e44c-4dc4-a73e-3ac4d975e12a",
      "category": "Convenience",
      "tags": ["Tools & Utilities"],
      "location": "https://raw.githubusercontent.com/WesleyMConner/HpmNavigation/main/pkgs/WmcUtils/WmcUtils_1.0.0.json",
      "description": "General-purpose functions leveraged in downstream Wmc Apps & Devices",
      "descriptive": "<b>ENHANCED LOGGING FUNCTIONS</b> <ul> <li>Control the amount of logged data <b>sent</b> to Hubitat and cite the enclosing function name (or tag, or line number).</li> <table width='100%'> <tr> <td align='center'> setLogLevel(<span style='color: grey;'>String</span>) <em style='color: grey;'>'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR'</em>)<br /> void logTrace(<span style='color: grey;'>String</span>) functionName(<span style='color: grey;'>, String</span>) | <span style='color: grey;'>, ArrayList</span> content)<br /> void logDebug(<span style='color: grey;'>String</span>) functionName(<span style='color: grey;'>, String</span>) | <span style='color: grey;'>, ArrayList</span> content)<br /> void logInfo(<span style='color: grey;'>String</span>) functionName(<span style='color: grey;'>, String</span>) | <span style='color: grey;'>, ArrayList</span> content)<br /> void logWarn(<span style='color: grey;'>String</span>) functionName(<span style='color: grey;'>, String</span>) | <span style='color: grey;'>, ArrayList</span> content) </td> </tr> </table> <li>Run code conditionally depending on the log level specified with setLogLevel(...).</li> <table width='100%'> <tr> <td align='center'>ifLogTrace() && statement</td> <td align='center'>if (ifLogTrace()) { statements }</td> </tr> <tr> <td align='center'>ifLogDebug() && statement</td> <td align='center'>if (ifLogDebug()) { statements }</td> </tr> <tr>v <td align='center'>ifLogInfo() && statement</td> <td align='center'>if (ifLogInfo()) { statements }</td> </tr> <tr> <td align='center'>ifLogWarn() && statement</td> <td align='center'>if (ifLogWarn()) { statements }</td> </tr> </table> <li>Log entries use colors to differentiate App and Device instances.</li> <li>Reference a peer App or Device instance with its 'hued' name.</li> <table width='100%'> <tr> <td align='center'> <span style='color: grey;'>String</span> hued(<span style='color: grey;'> InstalledAppWrapper | DeviceWrapper | ChildDeviceWrapper | null</span>)<br/> <span style='color: grey;'>String</span> stripHued(<span style='color: grey;'>String</span>) </td> </tr> </table> </ul> <b>TEXT FORMATTING FUNCTIONS</b> <ul> <p>The following formatting methods are useful in GUI paragraphs and when in logging methods.</p> <table width='100%'> <tr> <td align='center'>h1(<span style='color: grey;'>String</span>)</td> <td align='center'>h2(<span style='color: grey;'>String</span>)</td> <td align='center'>h3(<span style='color: grey;'>String</span>)</td> </tr> <tr> <td align='center'>bullet1(<span style='color: grey;'>String</span>)</td> <td align='center'>bullet2(<span style='color: grey;'>String</span>)</td> <td align='center'>bullet3(<span style='color: grey;'>String</span>)</td> </tr> <tr> <td align='center'>square1(<span style='color: grey;'>String</span>)</td> <td align='center'>square2(<span style='color: grey;'>String</span>)</td> <td align='center'>square3(<span style='color: grey;'>String</span>)</td> </tr> <tr> <td align='center'>b(<span style='color: grey;'>String</span>)</td> <td align='center'>i(<span style='color: grey;'>String</span>)</td> <td align='center'>bi(<span style='color: grey;'>String</span>)</td> </tr> <tr> <td align='center'>bList(<span style='color: grey;'>ArrayList</span>)</td> <td align='center'>bMap(<span style='color: grey;'>def</span>)</td> <td align='center'>safeParseInt(<span style='color: grey;'>String</span>)</td> </tr> <tr> <td align='center'>mapToTable(<span style='color: grey;'>def</span>, ..)</td> <td align='center'>cleanStrings(<span style='color: grey;'>ArrayList</span>)</td> <td align='center'>modeNames()</td> </tr> <tr> <td align='center'>blackBar()</td> <td align='center'>greenBar()</td> <td align='center'>redBar()</td> </tr> <tr> <td align='center'>toJson(<span style='color: grey;'>def</span>)</td> <td align='center'>alert(<span style='color: grey;'>String</span>)</td> <td align='center'></td> </tr> </table> </ul> <b>VERSIONS</b> <ul> <table width='100%' border='1' frame='void' rules='rows'> <tr> <th align='center'>BUNDLE (.zip)</th> <th align='center'>LIBRARIES (.groovy)</th> <th align='center'>APPS (.groovy)</th> <th align='center'>DEVICES (.groovy)</th> </tr> <tr> <td align='center'>WmcUtilsBundle_1.0.0</td> <td align='center'>WmcUtilsLib_1.0.0</td> <td align='center'>WmcUtilsDemo_1.0.0</td> <td align='center'>\u2014</td> </tr> </table> </ul>"
    },
    {
      "name": "Wmc Pbsg (Push Button Switch Group)",
      "id": "0f1c3181-1c96-4b88-bf48-8120bde75648",
      "category": "Control",
      "tags": ["Buttons", "Lights & Switches", "Misc. Devices", "Tools & Utilities"],
      "location": "https://raw.githubusercontent.com/WesleyMConner/HpmNavigation/main/pkgs/WmcPbsg/WmcPbsg_1.0.0.json",
      "description": "Create virtual keypads with mutually-exclusive buttons and corresponding virtual switches.",
      "descriptive": "<b>WHAT IS A PUSH BUTTON SWITCH GROUP (PBSG)?</b> <ul> <li>A PBSG is a <b>Virtual Keypad</b> with two or more <b>Named Buttons</b></li> <li>Each <b>Named Button</b> has a corresponding <b>Virtual Switch with Toggle (VSWT)</b> device.</li> <ul> <li>If a keypad button is <b>active</b>, its VSWT is <b>on</b>.</li> <li>If a keypad button is <b>inactive</b>, its VSWT is <b>off</b>.</li> </ul> <li>Only one button can be <b>active</b> at a time <em>(i.e., buttons are <b>mutually exclusive</b>)</em>.</li> <li>An optional <b>Default Button</b> can be specified.</li> </ul><b>KEYPAD METHODS</b> <ul> <table> <tr> <td align='right'><span style='color: grey;'>void</span> configPbsg(<span style='color: grey;'>String</span> jsonPrefs)</td> <td>&nbsp;&nbsp; <td>// Set or adjust <b>Preferences</b> (button names, default button) programmatically.</td> </tr> <tr> <td align='right'><span style='color: grey;'>void</span> activate(<span style='color: grey;'>String</span> button)</td> <td></td> <td>// Activate a button (mutually exclusively).</td> </tr> <tr> <td align='right'><span style='color: grey;'>void</span> deactivate(<span style='color: grey;'>String</span> button)</td> <td></td> <td>// Deactivate a button and activate the Default Button if specified.</td> </tr> <tr> <td align='right'><span style='color: grey;'>void</span> push(<span style='color: grey;'>Integer</span> buttonNumber)</td> <td></td> <td>// Toggle the corresponding button (activate\u2194deactivate).</td> </tr> </table> </ul> <b>CHILD DEVICE METHODS</b> <ul> <table> <tr> <td align='right'><span style='color: grey;'>void</span> on()</td> <td>&nbsp;&nbsp; <td>// Activates the corresponding keypad button.</td> </tr> <tr> <td align='right'><span style='color: grey;'>void</span> off()</td> <td/> <td>// Deactivates the corresponding keypad button.</td> </tr> <tr> <td align='right'><span style='color: grey;'>void</span> push()</td> <td/> <td>// Toggles the corresponding keypad button.</td> </tr> </table> </ul> <b>VERSIONS</b> <ul> <table width='100%' border='1' frame='void' rules='rows'> <tr> <th align='center'>PKG PREFIX</th> <th align='center'>BUNDLE (.zip)</th> <th align='center'>LIBRARIES (.groovy)</th> <th align='center'>APPS (.groovy)</th> <th align='center'>DEVICES (.groovy)</th> </tr> <tr> <td align='center'>WmcPbsg</td> <td align='center'>WmcPbsgBundle_1.0.0</td> <td align='center'>\u2014</td> <td align='center'>WmcPbsgDemo_1.0.0</td> <td align='center'>WmcPbsg_1.0.0<br/>WmcPbsgVswt_1.0.0</td> </tr> </table> </ul>"
    }
  ]
}
